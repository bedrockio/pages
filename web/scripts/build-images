#!/usr/bin/env node --no-warnings

const fs = require('fs/promises');
const path = require('path');

const { program } = require('commander');
const { createImageSet } = require('@bedrockio/pages-utils');

const SIZES = [300, 600, 1200];
const EXTENSIONS = ['.png', '.jpg', '.jpeg', '.gif', '.webp'];
const INPUT_DIR = '.';
const OUTPUT_DIR = 'src/assets/images/sets';

// Args

program
  .name('build-images')
  .argument('[path]', 'The input directory.', INPUT_DIR)
  .description(
    [
      'Compiles images into multiple sizes optimized for the web.',
      'Outputs as modules to be imported by the web app.',
    ].join('\n'),
  )
  .option(
    '--sizes <numbers...>',
    'The sizes to target',
    (str) => {
      return str.split(',').map(Number);
    },
    SIZES,
  )
  .option('-o, --output <string>', 'The output directory.', OUTPUT_DIR);

program.parse();
const opts = program.opts();

(async () => {
  await buildImageSets();
})();

async function buildImageSets() {
  const input = program.args[0] || INPUT_DIR;
  let filepaths;
  if (await isDirectory(input)) {
    filepaths = await fs.readdir(input, {
      withFileTypes: true,
    });
    filepaths = filepaths.map((ent) => {
      return path.join(ent.path, ent.name);
    });
    filepaths = filepaths.filter((file) => {
      return EXTENSIONS.includes(path.extname(file));
    });
  } else {
    filepaths = [input];
  }

  for (let filepath of filepaths) {
    const ext = path.extname(filepath);
    const base = path.basename(filepath, ext);
    const dir = path.join(opts.output, base);

    const imports = [];
    const images = [];

    await fs.rm(dir, {
      force: true,
      recursive: true,
    });

    await fs.mkdir(dir, {
      recursive: true,
    });

    const { ratio, files } = await createImageSet({
      file: filepath,
      sizes: opts.sizes,
    });

    for (let file of files) {
      const { size, filename, buffer } = file;

      await fs.writeFile(path.join(dir, filename), buffer);

      const varName = `w${size}`;
      imports.push(`import ${varName} from './${filename}';`);
      images.push({
        size,
        url: varName,
      });
    }

    const index = `
${imports.join('\n')}

export default {
  ratio: ${ratio},
  images: [
    ${images
      .map((v) => {
        return `{
    ${Object.entries(v)
      .map(([key, value]) => {
        return `  ${key}: ${value},`;
      })
      .join('\n    ')}
    },`.trim();
      })
      .join('\n    ')}
  ],
};
    `.trim();
    await fs.writeFile(path.join(dir, 'index.js'), index);
  }
}

async function isDirectory(path) {
  const stat = await fs.lstat(path);
  return stat.isDirectory();
}
